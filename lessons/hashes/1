  describe '#away_goals_per_team' do
    it 'returns hash of teams and total away game goals' do
      GameFactory.new
      GameFactory.create_games("./fixtures/games_fixture.csv")
      
      expect(Game.away_goals_per_team).to eq({3=>5, 6=>12, 5=>1, 17=>5, 16=>3, 9=>3, 8=>3})
      
      GameFactory.reset_games
    end
  end

  describe '#away_games_per_team' do
    it 'returns hash of teams and total away games' do
      GameFactory.new
      GameFactory.create_games("./fixtures/games_fixture.csv")
      
      expect(Game.away_games_per_team).to eq({3=>3, 6=>4, 5=>2, 17=>4, 16=>3, 9=>2, 8=>2})
      
      GameFactory.reset_games
    end
  end
  
  describe '#away_avg_goals_per_team' do
    it 'returns hash of teams and average away game goals' do
      GameFactory.new
      GameFactory.create_games("./fixtures/games_fixture.csv")
      
      expect(Game.away_avg_goals_per_team).to eq({3=>1.67, 6=>3.0, 5=>0.5, 17=>1.25, 16=>1.0, 9=>1.5, 8=>1.5})
      
      GameFactory.reset_games
    end
  end

  describe '#highest_scoring_visitor' do
    it 'can name the awat team with the highest average score per game' do
      GameFactory.new
      GameFactory.create_games("./fixtures/games_fixture.csv")
      
      expect(Game.highest_scoring_visitor).to eq "FC Dallas"

      GameFactory.reset_games
    end
  end

  describe '#lowest_scoring_visitor' do
    it 'can name the away team with the lowest average score per game' do
      GameFactory.new
      GameFactory.create_games("./fixtures/games_fixture.csv")
      
      expect(Game.lowest_scoring_visitor).to eq "Sporting Kansas City"

      GameFactory.reset_games
    end
  end



  ################

  def self.away_goals_per_team
    away_goals = Hash.new(0)
    all_games.each do |game|
      away_goals[game.away_team_id] += game.away_goals
    end
    away_goals
  end

  def self.away_games_per_team
    away_games = Hash.new(0)
    all_games.each do |game|
      away_games[game.away_team_id] += 1
    end
    away_games
  end
  
  def self.away_avg_goals_per_team
    avg_away_gpg = Hash.new(0)
    self.away_goals_per_team.each do |team, goals|
      avg_away_gpg[team] = (goals.to_f / Game.away_games_per_team[team]).round(2)
    end
    avg_away_gpg
  end
  
  def self.highest_scoring_visitor
    team_id_highest = self.away_avg_goals_per_team.max_by { |key, value| value }[0]
    team_name_highest = nil
    teams = TeamFactory.create_teams("./data/teams.csv")
    Team.all_teams.each do |team_object|
      if team_object.team_id == team_id_highest
        team_name_highest = team_object.team_name
      end
    end
    team_name_highest
  end

  def self.lowest_scoring_visitor
    team_id_lowest = self.away_avg_goals_per_team.min_by { |key, value| value }[0]
    team_name_lowest = nil
    teams = TeamFactory.create_teams("./data/teams.csv")
    Team.all_teams.each do |team_object|
      if team_object.team_id == team_id_lowest
        team_name_lowest = team_object.team_name
      end
    end
    team_name_lowest
  end